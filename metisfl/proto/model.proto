syntax = "proto3";
package metisfl;

///////////////////////////
// Tensor Representation //
///////////////////////////

/**
 * Aiming for a minimal representation based on the numpy.dtype Python class.
 * See https://docs.scipy.org/doc/numpy/reference/arrays.dtypes.html
 * Following representation is based on the excellent work of Max Klein:
 * https://github.com/telamonian/numpy-protobuf
 */
message DType {

  enum Type {
    INT8 = 0; // Byte (-128 to 127)
    INT16 = 1; // Integer (-32768 to 32767)
    INT32 = 2; // Integer (-2147483648 to 2147483647)
    INT64 = 3; // Integer (-9223372036854775808 to 9223372036854775807)
    UINT8 = 4; // Unsigned integer (0 to 255)
    UINT16 = 5; // Unsigned integer (0 to 65535)
    UINT32 = 6; // Unsigned integer (0 to 4294967295)
    UINT64 = 7; // Unsigned integer (0 to 18446744073709551615)
    FLOAT32 = 8; // Single precision float: sign bit, 8 bits exponent, 23 bits mantissa
    FLOAT64 = 9; // Double precision float: sign bit, 11 bits exponent, 52 bits mantissa
  }

  enum ByteOrder {
    NA = 0; // Order not applicable. For example, endian is not relevant for 8 bit numbers, e.g., int8, uint8!
    BIG_ENDIAN_ORDER = 1; // We add the _ORDER suffix because the BIG_ENDIAN and LITTLE_ENDIAN macros are already used.
    LITTLE_ENDIAN_ORDER = 2;
  }

  Type type = 1;
  ByteOrder byte_order = 2;
  bool fortran_order = 3;

}

// FIXME: This is not used anywhere
message TensorQuantifier {
  optional uint32 tensor_non_zeros = 1; // We set the field as optional because we want to print/record the zero values.
  optional uint32 tensor_zeros = 2; // We set the field as optional because we want to print/record the zero values.
  uint32 tensor_size_bytes = 3;
}

message TensorSpec {
  uint32 length = 1;
  repeated int64 dimensions = 2;
  DType type = 3;
  bytes value = 4;
}

message PlaintextTensor {
  TensorSpec tensor_spec = 1;
}

message CiphertextTensor {
  TensorSpec tensor_spec = 1;
}

message Model {
  message Variable {
    string name = 1;
    bool trainable = 2;
    bool encrypted = 3;
    oneof tensor {
      PlaintextTensor plaintext_tensor = 4;
      CiphertextTensor ciphertext_tensor = 5;
    }
}
  repeated Variable variables = 1;
}

message FederatedModel {
  uint32 num_contributors = 1;
  uint32 global_iteration = 2;
  Model model = 3;
}

