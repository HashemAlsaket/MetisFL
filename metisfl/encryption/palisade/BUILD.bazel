load("@rules_foreign_cc//foreign_cc:defs.bzl", "cmake")
load("@pybind11_bazel//:build_defs.bzl", "pybind_extension")

package(default_visibility = ["//visibility:public"])

pybind_extension(
    # The name of this rule is associated with how the module will be imported
    # in python scripts. The rule will generate the lib fhe.so, which is
    # also a data dependency for the py_library() rule below; therefore it needs
    # to remain UNCHANGED!
    name = "fhe",
    srcs = ["ckks_pybind.cc"],
    deps = [
      ":palisade_wrapper",
    ],
    linkopts = select({
      "//:linux_x86_64": ["-lgomp"],
      "//conditions:default": [],
    }),
    copts = [
            "-Wall",
            "-Werror",
            "-O3",
            "-DPALISADE_VERSION=1.11.7",
            "-Wno-unused-private-field",
            "-Wno-shift-op-parentheses",
            "-Wno-unused-command-line-argument",
            "-DMATHBACKEND=2",
            "-Xpreprocessor",
            "-fopenmp",
            "-lomp",
            "-fvisibility=default"
    ],
    linkstatic=True
)



cmake(
    name = "palisade_cmake",
    cache_entries = {
      "BUILD_BENCHMARKS": "OFF",
      "BUILD_UNITTESTS": "OFF",
      "CMAKE_BUILD_TYPE": "Release",
      "BUILD_STATIC": "ON"
	  },
    alwayslink=True,
    defines = ["MATHBACKEND=2"],
    env = {
        "CMAKE_BUILD_PARALLEL_LEVEL": "16",
    },
    includes = [
        "palisade",
        "palisade/binfhe",
        "palisade/core",
        "palisade/pke",
    ],
    lib_source = "@palisade_git//:palisade_srcs",
    out_include_dir = "include",
    out_static_libs = [
        "libPALISADEcore_static.a",
        "libPALISADEbinfhe_static.a",
        "libPALISADEpke_static.a",
    ],
    linkopts = select({
      "//:linux_x86_64": ["-lgomp"],
      "//conditions:default": [""],
    }),
    copts = [
        "-Wall",
        "-Werror",
        "-O3",
        "-DPALISADE_VERSION=1.11.7",
        "-Wno-unused-private-field",
        "-Wno-shift-op-parentheses",
        "-DMATHBACKEND=2",
        "-Xpreprocessor",
        "-fopenmp",
        "-Wno-unused-command-line-argument",
    ]
)

cc_library(
    name = "palisade_wrapper",
    hdrs = ["ckks_scheme.h", "encryption_scheme.h"],
    srcs = ["ckks_scheme.cc"],
    deps = [
      "//metisfl/encryption/palisade:palisade_cmake",
      "@absl//absl/strings",
      "@com_github_google_glog//:glog",
    ],
    linkopts = select({
      "//:linux_x86_64": ["-lgomp"],
      "//conditions:default": [],
    }),
    copts = [
        "-Wall",
        "-Werror",
        "-O3",
        "-DPALISADE_VERSION=1.11.7",
        "-Wno-unused-private-field",
        "-Wno-shift-op-parentheses",
        "-DMATHBACKEND=2",
        "-Xpreprocessor",
        "-fopenmp",
        "-Wno-unused-command-line-argument",
    ]
)

cc_binary(
  name = "ckks_demo",
  data = [
    "//metisfl/resources:fheparams",
  ],
  srcs = ["ckks_demo.cc"],
  deps = [
    ":palisade_wrapper",
  ],
  linkstatic=True
)
