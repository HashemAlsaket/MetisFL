syntax = "proto3";
package metisfl;

import "metisfl/proto/model.proto";

import "google/protobuf/timestamp.proto";

/////////////
// Generic //
/////////////

// A server entity that participates in the collaborative learning environment.
message ServerEntity {
  // Either the hostname or the IP address of the server.
  string hostname = 1;

  // The server port that the service is running on.
  uint32 port = 2;

  // Public Certificate - This field should be set when SSL is enabled. It allows the authentication among different services to create secure client/server communication.
  string public_certificate_file = 3;

  // Private Key - For security reasons, this field needs to be empty. However, we provide the option to set it in case it needs to be used internally or shared with other services.
  string private_key_file = 4;
}

//////////////
// Learning //
//////////////

message DatasetSpec {
  uint32 num_training_examples = 1;
  uint32 num_validation_examples = 2;
  uint32 num_test_examples = 3;

  message ClassificationDatasetSpec {
    map<uint32, uint32> class_examples_num = 1;
  }

  message RegressionDatasetSpec {
    // TODO(stripeli): Need to add histogram support; the following statistic should refer to a histogram bucket.
    double min = 1;
    double max = 2;
    double mean = 3;
    double median = 4;
    double mode = 5;
    double stddev = 6;
  }

  oneof training_dataset_spec {
    ClassificationDatasetSpec training_classification_spec = 4;
    RegressionDatasetSpec training_regression_spec = 5;
  }

  oneof validation_dataset_spec {
    ClassificationDatasetSpec validation_classification_spec = 6;
    RegressionDatasetSpec validation_regression_spec = 7;
  }

  oneof test_dataset_spec {
    ClassificationDatasetSpec test_classification_spec = 8;
    RegressionDatasetSpec test_regression_spec = 9;
  }
}

message LearningTaskTemplate {
  // This reflects the number of local steps the learner needs to perform.
  uint32 num_local_updates = 1;
}

message LearningTask {
  // Records the id of the global iteration, i.e., id of the community model sent to the learner for local training.
  uint32 global_iteration = 1;
  // This reflects the number of local steps the learner needs to perform.
  // It is similar to epochs if we take |num_training_examples| / batch_size.
  uint32 num_local_updates = 2;

  float training_dataset_percentage_for_stratified_validation = 3;
  EvaluationMetrics metrics = 4;
}

message CompletedLearningTask {
  // This is the model trained by the learner locally.
  Model model = 1;

  // These are the basic metadata sent by the learner to the
  // controller whenever a locally assigned training task is complete.
  TaskExecutionMetadata execution_metadata = 2;

  // These are additional metadata sent by the learner to the controller.
  // TODO(stripeli): No structured response yet, but in a future release this should follow a specific format.
  string aux_metadata = 3;
}

message TaskExecutionMetadata {
  // Records the id of the global iteration, i.e., id of the global task or of the received community model.
  // Need it for bookkeeping when contacting the controller the completed local task.
  uint32 global_iteration = 1;

  TaskEvaluation task_evaluation = 2;

  // Learner may perform partial epochs, thus the float data type.
  float completed_epochs = 3;

  uint32 completed_batches = 4;

  uint32 batch_size = 5;

  // Time-per-epoch in milliseconds.
  float processing_ms_per_epoch = 6;

  // Time-per-batch in milliseconds.
  float processing_ms_per_batch = 7;
}

message TaskEvaluation {
  // A list with all training evaluations across all epochs.
  repeated EpochEvaluation training_evaluation = 1;

  // A list with all validation evaluations across all epochs.
  repeated EpochEvaluation validation_evaluation = 2;

  // A list of all test evaluations across all epochs.
  repeated EpochEvaluation test_evaluation = 3;
}

message EpochEvaluation {
  // The id of the epoch. This is an incremental value, i.e., serial number.
  // A learner is training continuously and therefore it can increment its epoch
  // id as it progresses its training.
  uint32 epoch_id = 1;

  ModelEvaluation model_evaluation = 2;
}

message EvaluationMetrics {
  repeated string metric = 1;
}

message ModelEvaluation {
  // TODO(stripeli): Not sure if we need a simple json response or scores! For instance, we might need additional metrics such as confusion matrices...

  // FOR NOW, we need to return the key-value formatted value! That is for every
  // string metric passed through the EvaluationMetrics object we reply with a
  // <metric, value> collection.
  map<string, string> metric_values = 1;
}

// Wrapper for multiple model evaluations.
message ModelEvaluations {
  ModelEvaluation training_evaluation = 1;
  ModelEvaluation validation_evaluation = 2;
  ModelEvaluation test_evaluation = 3;
}

message LocalTasksMetadata {
  repeated TaskExecutionMetadata task_metadata = 1;
}

message CommunityModelEvaluation {
  // Records the id of the global iteration, i.e., id of the community model being evaluated.
  uint32 global_iteration = 1;
  // A HashMap with learner as the key and the evaluation of the
  // community model on its local datasets as the value.
  map<string, ModelEvaluations> evaluations = 2;
}

// @stripeli 
message Hyperparameters {
  uint32 batch_size = 1;
}

////////////////
// Controller //
////////////////

message ControllerParams {
  ServerEntity server_entity = 1;
  GlobalModelSpecs global_model_specs = 2;
  CommunicationSpecs communication_specs = 3;
  ModelStoreConfig model_store_config = 4;
  ModelHyperparams model_hyperparams = 5;
}

message GlobalModelSpecs{
    string aggregation_rule = 1;
    string scaling_factor = 2;
    string stride_length = 3;
    string he_batch_size = 4;
    string he_scaling_factor_bits = 5;
    string he_crypto_context_file = 6;
}
 
message CommunicationSpecs{
    string protocol = 1;
    string semi_sync_lambda = 2;
    string semi_sync_recompute_num_updates = 3;
}

message ModelStoreConfig{
    string model_store = 1;
    string eviction_policy = 2;
    string model_store_hostname = 3;
    string model_store_port = 4;
}

message ModelHyperparams {
  uint32 batch_size = 1;
  uint32 num_epochs = 2;
}

message LearnerDescriptor {
  string id = 1;
  string auth_token = 2;
  ServerEntity server_entity = 3;
  DatasetSpec dataset_spec = 4;
}

message LearnerState {
  // Describes the learner. It also includes the generated authorization token for the learner.
  LearnerDescriptor learner = 1;

  // Learner's model lineage.
  repeated Model model = 2;
}

message FederatedTaskRuntimeMetadata {
  uint32 global_iteration = 1;
  google.protobuf.Timestamp started_at = 2;
  google.protobuf.Timestamp completed_at = 3;
  repeated string assigned_to_learner_id = 4;
  repeated string completed_by_learner_id = 5;
  // The times for train and eval tasks are based on the time they are submitted/sent
  // to the learners. They do not reflect the "true" time it takes for actual training
  // and evaluation, since the period (submitted_at, received_at) also contains the
  // communication time - message exchanges roundtrip.
  map<string, google.protobuf.Timestamp> train_task_submitted_at = 6;
  map<string, google.protobuf.Timestamp> train_task_received_at = 7;
  map<string, google.protobuf.Timestamp> eval_task_submitted_at = 8;
  map<string, google.protobuf.Timestamp> eval_task_received_at = 9;
  map<string, double> model_insertion_duration_ms = 10;
  map<string, double> model_selection_duration_ms = 11;
  google.protobuf.Timestamp model_aggregation_started_at = 12;
  google.protobuf.Timestamp model_aggregation_completed_at = 13;
  double model_aggregation_total_duration_ms = 14;
  repeated double model_aggregation_block_size = 15;
  repeated double model_aggregation_block_memory_kb = 16;
  repeated double model_aggregation_block_duration_ms = 17;
  repeated TensorQuantifier model_tensor_quantifiers = 18;
}
