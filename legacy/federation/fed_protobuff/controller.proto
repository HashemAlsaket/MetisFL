syntax = "proto3";
package federation.fed_protobuff.controller;

import "federation/fed_protobuff/common.proto";
import "federation/fed_protobuff/federatedmodel.proto";

service Controller {

    // Unary RPC. Retrieve community models' metadata related to the models' evaluation.
    rpc GetCommunityModelEvaluationsLineage (GetCommunityModelEvaluationLineageRequest) returns (GetCommunityModelEvaluationLineageResponse) {}

    // Unary RPC. Controller replies with community models (num_backtracks value 0:all, 1:last, 2:previous to last, etc...).
    rpc GetCommunityModelLineage (GetCommunityModelLineageRequest) returns (GetCommunityModelLineageResponse) {}

    // Unary RPC. Retrieve learners local models' metadata related to the models' evaluation (num_backtracks value 0:all, 1:last, 2:previous to last, etc...).
    rpc GetLearnerLocalModelEvaluationsLineage (GetLearnerLocalModelEvaluationLineageRequest) returns (GetLearnerLocalModelEvaluationLineageResponse) {}

    // Unary RPC. Retrieve most recent and historically trained learners local models (num_backtracks value 0:all, 1:last, 2:previous to last, etc...).
    rpc GetLearnerLocalModelLineage (GetLearnerLocalModelLineageRequest) returns (GetLearnerLocalModelLineageResponse) {}

    // Unary RPC. Retrieve collection of all participating learners in the federation.
    rpc GetParticipatingLearners (GetParticipatingLearnersRequest) returns (GetParticipatingLearnersResponse) {}

    // Unary RPC. Controller replies with runtime metadata related to the federation environment (e.g., number of community update requests).
    rpc GetRuntimeMetadata (GetRuntimeMetadataRequest) returns (GetRuntimeMetadataResponse) {}

    // Unary RPC. Controller replies with the health status (beat) of its internal services.
    rpc GetServicesHealthStatus (GetServicesHealthStatusRequest) returns (GetServicesHealthStatusResponse) {}

    // Unary RPC. A new participating learner asks the controller to join the federation.
    rpc JoinFederation (JoinFederationRequest) returns (JoinFederationResponse) {}

    // Unary RPC. An existing learner informs the controller that it leaves the federation.
    rpc LeaveFederation (LeaveFederationRequest) returns (LeaveFederationResponse) {}

    // Unary RPC. Controller receives the local model of a learner when it completes its (locally) assigned task.
    rpc MarkTaskCompleted (MarkTaskCompletedRequest) returns (MarkTaskCompletedResponse) {}

}

message GetCommunityModelEvaluationLineageRequest {
    int32 num_backtracks = 1; // Refer to the number of evaluation request rounds that we need to re-track. If non-positive (x <= 0): reply all, otherwise (x>0) reply current and num-1 latest community models evaluations.
}

message GetCommunityModelEvaluationLineageResponse {
    // Endpoint response is possible to contain two separate evaluations:
    //  1. Evaluation on datasets held exclusively by the controller (e.g. global test dataset).
    //  2. Evaluation on datasets held exclusively by the learners (e.g. local train/validation/test dataset).
    string json_evaluation_lineage_response = 1; // TODO No structured response yet, but in a future release this should follow a specific format.
}

message GetCommunityModelLineageRequest {
    int32 num_backtracks = 1; // Number of models that we need to re-track. If non-positive (x <= 0): reply all, otherwise (x>0) reply current and num-1 latest community models.
}

message GetCommunityModelLineageResponse {
    repeated federatedmodel.FederatedModel federated_models = 1; // Reply a sequence of models.
}

message GetLearnerLocalModelEvaluationLineageRequest {
    int32 num_backtracks = 1; // Refer to the number of evaluation request rounds that we need to re-track. If non-positive (x <= 0): reply all, otherwise (x>0) reply current and num-1 latest learners' local models evaluations.
    repeated LearnerEntity learner_entity = 2; // Retrieve the num_backtracks evaluations for every learner that exists in the provided LearnerEntity collection.
}

message GetLearnerLocalModelEvaluationLineageResponse {
    string json_evaluation_lineage_response = 1; // TODO No structured response yet, but in a future release this should follow a specific format.
}

message GetLearnerLocalModelLineageRequest {
    int32 num_backtracks = 1; // Refer to the number of local models that we need to re-track. If non-positive (x <= 0): reply all, otherwise (x>0) reply current and num-1 latest learners' local models.
    repeated LearnerEntity learner_entity = 2; // Retrieve the num_backtracks local models for every learner that exists in the provided LearnerEntity collection.
}

message GetLearnerLocalModelLineageResponse {
    repeated LearnerLocalModelResponse learner_local_model = 1; // Reply a sequence of LocalModelResponses. One record for each requested learner: [ (LearnerEntity, [LocalModel1, LocalModel2, ...]), (,[]), ... ]
}

message GetParticipatingLearnersRequest {}

message GetParticipatingLearnersResponse {
    repeated LearnerEntity learner_entity = 1; // Return a collection with all the participating learners in the federation.
}

message GetRuntimeMetadataRequest {}

message GetRuntimeMetadataResponse {
    string json_metadata = 1; // TODO No structured response yet, but in a future release this should follow a specific format.
}

message GetServicesHealthStatusRequest {}

message GetServicesHealthStatusResponse {
    map<string, bool> services_status = 1; // A Key-Value services status reply.
}

message JoinFederationRequest {
    string learner_id = 1; // If this field is empty/None then this learner is new. If it not empty its (id,token) must match with the existing records inside controller's book keeping collection.
    LearnerEntity learner_entity = 2;
    LocalDatasetSpec local_dataset_spec = 3;
}

message JoinFederationResponse {
    Ack ack = 1;
    string learner_id = 2; // The id of the learner assigned by the controller, see `JoinFederationResponse`.
    string auth_token = 3; // For security reasons, the controller generates a random 64-characters string that is associated with the joining learner. The (learner_id, token) composite key is required throughout training when a learner contacts the controller.
}

message LearnerLocalModelResponse {
    LearnerEntity learner_entity = 1; // The description of the learner entity.
    repeated federatedmodel.FederatedModel federated_model = 2; // For a single learner we can return a collection of locally trained models. We encapsulate the local models as federation models because there is no difference in the structure of the two model types.
}

message MarkTaskCompletedRequest {
    string learner_id = 1; // The id of the learner assigned by the controller, see `JoinFederationResponse`.
    string auth_token = 2; // This is associated with the auth_token in `JoinFederationResponse` message.
    federatedmodel.FederatedModel federated_model = 3; // This is the model trained by the learner locally.
    LearnerExecutionBaseMetadata base_metadata = 4; // These are the basic metadata sent by the learner to the controller whenever a locally assigned training task is complete.
    string aux_metadata = 5; // These are additional metadata sent by the learner to the controller. TODO No structured response yet, but in a future release this should follow a specific format.
}

message LearnerExecutionAuxMetadata {
    string json_response = 1;
}

message MarkTaskCompletedResponse {
    Ack ack = 1;
}

message LeaveFederationRequest {
    string learner_id = 1; // The id of the learner assigned by the controller, see `JoinFederationResponse`.
    string auth_token = 2; // This is associated with the auth_token in `JoinFederationResponse` message.
}

message LeaveFederationResponse {
    Ack ack = 1;
}