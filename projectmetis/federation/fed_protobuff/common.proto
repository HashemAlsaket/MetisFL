syntax = "proto3";
package federation.fed_protobuff;

import "federation/fed_protobuff/optimizers.proto";
import "google/protobuf/timestamp.proto";

message Ack {
    bool status = 1;
    google.protobuf.Timestamp timestamp = 2;
}

message DoubleVariable {
    repeated double values = 1;
    VariableDef variable_def = 2;
}

message LearnerEntity {
    string id = 1;
    string hostname = 2; // hostname field can be a hostname or an ip.
    int32 port = 3;
}

message LearnerExecutionBaseMetadata {
    // TODO For every training, validation and test score below, we need to define the metrics we expect the learner to return. These metrics should be the ones defined in the evaluation field of message `common.LearningTask.evaluation`.
    repeated float epochs_training_scores = 1; // A list of all training evaluations across all epochs.
    repeated float epochs_validation_scores = 2;
    repeated float epochs_test_scores = 3;
    float completed_epochs = 4; // Learner may perform partial epochs, thus the float data type.
    int32 completed_batches = 5;
    int32 batch_size = 6;
    float processing_ms_per_epoch = 7; // Time-per-epoch in milliseconds.
    float processing_ms_per_batch = 8; // Time-per-batch in milliseconds.
}

message LearningHyperParameters {
    int32 batch_size = 1;
    oneof optimizer {
        optimizers.VanillaSGD vanilla_sgd = 3;
        optimizers.MomentumSGD momentum_sgd = 4;
        optimizers.FedProx fed_prox = 5;
        optimizers.Adam adam = 6;
    }
}

message LearningTask {
    int32 num_local_updates = 1; // This reflects the number of local steps the learner needs to perform. It is similar to epochs if we take |num_training_examples| / batch_size.
    float training_dataset_percentage_for_stratified_validation = 2;
    // TODO We need to define the metrics we expect the learner to return. This should be similar to the evaluation field in message `learner.EvaluateModelRequest`.
}

message LocalDatasetSpec {
    int32 num_training_examples = 1;
    int32 num_validation_examples = 2;
    int32 num_test_examples = 3;
    // TODO We need to add a message, which in the case of classification describes: (#classes, #examples_per_class), and in the case of regression: (mean, std, variance).
}

message VariableDef {
    int32 size = 1; // Number of elements in the array.
    string dtype = 2; // Data type (int, float, double); can be used for casting.
    repeated int32 dimensions = 3; // List of variable's dimensions.
}

