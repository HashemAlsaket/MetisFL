import sys
import os.path

## Set path so that you can import the local modules
sys.path.append(os.path.join(os.path.dirname(__file__), '../../'))

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from tests.grpc.random_examples import helloworld_pb2 as tests_dot_grpc_dot_helloworld__pb2


class GreetingServiceStub(object):
  # missing associated documentation comment in protos file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.HelloWorld = channel.unary_unary(
        '/tests.grpc.GreetingService/HelloWorld',
        request_serializer=tests_dot_grpc_dot_helloworld__pb2.HelloRequest.SerializeToString,
        response_deserializer=tests_dot_grpc_dot_helloworld__pb2.HelloReply.FromString,
        )


class GreetingServiceServicer(object):
  # missing associated documentation comment in protos file
  pass

  def HelloWorld(self, request, context):
    # missing associated documentation comment in protos file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GreetingServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'HelloWorld': grpc.unary_unary_rpc_method_handler(
          servicer.HelloWorld,
          request_deserializer=tests_dot_grpc_dot_helloworld__pb2.HelloRequest.FromString,
          response_serializer=tests_dot_grpc_dot_helloworld__pb2.HelloReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'tests.grpc.GreetingService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
