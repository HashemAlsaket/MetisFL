syntax = "proto3";
package metisfl;

import "metisfl/proto/model.proto";
import "metisfl/proto/learner.proto";
import "metisfl/proto/service_common.proto";

service ControllerService {
  rpc GetHealthStatus (Empty) returns (Ack) {}

  rpc SetInitialModel (Model) returns (Ack) {}

  rpc JoinFederation (Learner) returns (LearnerId) {}

  rpc LeaveFederation (LearnerId) returns (Ack) {}

  rpc StartTraining (Empty) returns (Ack) {}

  rpc TrainDone (TrainDoneRequest) returns (Ack) {}

  rpc GetLogs (Empty) returns (Logs) {}
  
  rpc ShutDown (Empty) returns (Ack) {}
}

message Learner {
  string hostname = 1;
  uint32 port = 2;
  string root_certificate_bytes = 3;
  string public_certificate_bytes = 4;
  uint32 num_training_examples = 5;
}

message LearnerId {
  string id = 1;
}

message TrainDoneRequest {
  string learner_id = 1;
  string task_id = 2;
  Model model = 3;
  TrainingMetadata metadata = 4;
}

message TrainingMetadata {
  map<string, string> metrics = 1;
  float completed_epochs =  2;
  uint32 completed_batches = 3;
  uint32 batch_size = 4;
  float processing_ms_per_epoch = 5;
  float processing_ms_per_batch = 6;
}

message Logs {
  // task_id -> learner_id
  map<string, string> task_learner_map = 1;

  // Indexed by task_id
  map<string, TrainingMetadata> training_metadata = 2;
  map<string, EvaluationMetadata> evaluation_metadata = 3;
  map<string, ModelMetadata> model_metadata = 4;
}

// TODO: record task stard/end time

message ModelMetadata {
  double selection_duration_ms = 2;
  double aggregation_duration_ms = 3;
  repeated double aggregation_block_size = 15;
  repeated double aggregation_block_memory_kb = 16;
  repeated double aggregation_block_duration_ms = 17;
  repeated TensorQuantifier tensor_quantifiers = 18;
}
