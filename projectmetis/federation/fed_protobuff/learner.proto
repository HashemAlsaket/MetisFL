syntax = "proto3";
package federation.fed_protobuff.learner;

import "federation/fed_protobuff/common.proto";
import "federation/fed_protobuff/federatedmodel.proto";

service Learner {

    // Unary RPC. The learner receives a model and evaluates it at its local dataset (any of [train, validation, test]).
    rpc EvaluateModel (EvaluateModelRequest) returns (EvaluateModelResponse) {}

    // Unary RPC. Retrieve the status of all internal services.
    rpc GetServicesHealthStatus (GetServicesHealthStatusRequest) returns (GetServicesHealthStatusResponse) {}

    // Unary RPC. Assign task to be trained locally by the learner.
    rpc RunTask (RunTaskRequest) returns (RunTaskResponse) {}

}

message EvaluateModelRequest {
    federatedmodel.FederatedModel federated_model = 1; // A single model sent to the evaluation service of the learner.
    enum dataset_to_eval {
        TRAINING = 0;
        VALIDATION = 1;
        TEST = 2;
    }
    repeated dataset_to_eval evaluation_dataset = 2; // This is a repeated field since we might request to evaluate a model on more than one datasets.
    repeated string metrics = 3; // The list of metrics we want to evaluate the model, e.g., ["accuracy", "f1_score", "confusion_matrix", etc...]
    // TODO We need to define a field as: `one of {classification ..., regression ...}` and create a new .proto file for each case.
}

message EvaluateModelResponse {
    map<string, string> metric_values = 1; // Need to return the key-value formatted value FOR NOW! That is for every string metric passed through the EvaluateModelRequest endpoint we reply a <metric, value> collection.
    // TODO Not sure if we need a simple json response or scores! For instance, we might need additional metrics such as confusion matrices...
}

message GetServicesHealthStatusRequest {}

message GetServicesHealthStatusResponse {
    map<string, bool> services_status = 1;
}

message RunTaskRequest {
    federatedmodel.FederatedModel federated_model = 1; // This is the community model sent by the controller to the learner to run the assigned task.
    LearningTask task = 2; // Description of the assigned task.
    LearningHyperParameters learning_hyperparameters = 3; // The hyperparameters related to the SGD optimization, related to the model's optimizer.
}

message RunTaskResponse {
    Ack ack = 1;
}
