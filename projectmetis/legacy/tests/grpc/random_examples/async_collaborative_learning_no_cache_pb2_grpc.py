# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from tests.grpc.random_examples import async_collaborative_learning_no_cache_pb2 as tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2


class AsyncCollaborativeLearningStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.StartShippingGradients = channel.stream_stream(
        '/tests.grpc.AsyncCollaborativeLearning/StartShippingGradients',
        request_serializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.Learner.SerializeToString,
        response_deserializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.Ack.FromString,
        )
    self.DispatchGradients = channel.stream_stream(
        '/tests.grpc.AsyncCollaborativeLearning/DispatchGradients',
        request_serializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.DispatchGradientsRequest.SerializeToString,
        response_deserializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.Ack.FromString,
        )
    self.RequestGradientsUpdate = channel.stream_stream(
        '/tests.grpc.AsyncCollaborativeLearning/RequestGradientsUpdate',
        request_serializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.DispatchGradientsRequest.SerializeToString,
        response_deserializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.Ack.FromString,
        )
    self.FetchUpdatedGradients = channel.unary_stream(
        '/tests.grpc.AsyncCollaborativeLearning/FetchUpdatedGradients',
        request_serializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.Learner.SerializeToString,
        response_deserializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.CommunityReadyResponse.FromString,
        )
    self.FetchFirstUpdatedGradients = channel.unary_stream(
        '/tests.grpc.AsyncCollaborativeLearning/FetchFirstUpdatedGradients',
        request_serializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.Empty.SerializeToString,
        response_deserializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.CommunityReadyResponse.FromString,
        )
    self.HelloWorld = channel.unary_unary(
        '/tests.grpc.AsyncCollaborativeLearning/HelloWorld',
        request_serializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.HelloRequest.SerializeToString,
        response_deserializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.HelloReply.FromString,
        )


class AsyncCollaborativeLearningServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def StartShippingGradients(self, request_iterator, context):
    """
    Unary RPC: Learner pings Controller to check whether his gradients are needed
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DispatchGradients(self, request_iterator, context):
    """
    This endpoint is an aftermath of the StartShippingGradients response. If the above response is True, then:
    Bi-directional Streaming RPC:
    - Client sends his latest gradients in a streaming fashion
    - Server acts in a streaming fashion as well and streams acknowledgements for every request that is received
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RequestGradientsUpdate(self, request_iterator, context):
    """
    Bi-directional Streaming RPC:
    - Client requests from Controller a community update and sends his latest gradients in a streaming fashion.
    - Server acts in a streaming fashion as well and streams acknowledgements for every request that is received
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FetchUpdatedGradients(self, request, context):
    """
    Server Streaming RPC: Client pings server to check if the community update is ready. If yes, server streams the community weights back to the client
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FetchFirstUpdatedGradients(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def HelloWorld(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AsyncCollaborativeLearningServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'StartShippingGradients': grpc.stream_stream_rpc_method_handler(
          servicer.StartShippingGradients,
          request_deserializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.Learner.FromString,
          response_serializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.Ack.SerializeToString,
      ),
      'DispatchGradients': grpc.stream_stream_rpc_method_handler(
          servicer.DispatchGradients,
          request_deserializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.DispatchGradientsRequest.FromString,
          response_serializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.Ack.SerializeToString,
      ),
      'RequestGradientsUpdate': grpc.stream_stream_rpc_method_handler(
          servicer.RequestGradientsUpdate,
          request_deserializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.DispatchGradientsRequest.FromString,
          response_serializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.Ack.SerializeToString,
      ),
      'FetchUpdatedGradients': grpc.unary_stream_rpc_method_handler(
          servicer.FetchUpdatedGradients,
          request_deserializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.Learner.FromString,
          response_serializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.CommunityReadyResponse.SerializeToString,
      ),
      'FetchFirstUpdatedGradients': grpc.unary_stream_rpc_method_handler(
          servicer.FetchFirstUpdatedGradients,
          request_deserializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.Empty.FromString,
          response_serializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.CommunityReadyResponse.SerializeToString,
      ),
      'HelloWorld': grpc.unary_unary_rpc_method_handler(
          servicer.HelloWorld,
          request_deserializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.HelloRequest.FromString,
          response_serializer=tests_dot_grpc_dot_async__collaborative__learning__no__cache__pb2.HelloReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'tests.grpc.AsyncCollaborativeLearning', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
