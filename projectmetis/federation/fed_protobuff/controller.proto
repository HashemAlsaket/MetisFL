syntax = "proto3";
package federation.fed_protobuff.controller;

import "federation/fed_protobuff/common.proto";
import "federation/fed_protobuff/federatedmodel.proto";

service Controller {

    // Unary RPC. Controller replies with community models (0:all, 1:last, 2:previous to last, etc...).
    rpc GetCommunityModelLineage (GetCommunityModelLineageRequest) returns (GetCommunityModelLineageResponse) {}

    // Unary RPC. Controller replies with federation related runtime metadata (e.g., number of community update requests).
    rpc GetRuntimeMetadata (GetRuntimeMetadataRequest) returns (GetRuntimeMetadataResponse) {}

    // Unary RPC. Controller replies with the health status (beat) of its internal services.
    rpc GetServicesHealthStatus (GetServicesHealthStatusRequest) returns (GetServicesHealthStatusResponse) {}

    // Unary RPC. A new participating learner asks the controller to join the federation.
    rpc JoinFederation (JoinFederationRequest) returns (JoinFederationResponse) {}

    // Unary RPC. Controller receives the local model of a learner when it completes its local task.
    rpc MarkTaskCompleted (MarkTaskCompletedRequest) returns (MarkTaskCompletedResponse) {}

    // Unary RPC. An existing learner informs the controller it leaves the federation.
    rpc LeaveFederation (LeaveFederationRequest) returns (LeaveFederationResponse) {}

}

message GetCommunityModelLineageRequest {
    int32 num_backtracks = 1; // Number of models that we need to re-track. If non-positive (x <= 0): reply all, otherwise (x>0) reply current and num-1 latest community models.
}

message GetCommunityModelLineageResponse {
    repeated federatedmodel.FederatedModel federated_models = 1; // Reply a sequence of models.
}

message GetRuntimeMetadataRequest {}

message GetRuntimeMetadataResponse {
    string json_metadata = 1;
}

message GetServicesHealthStatusRequest {}

message GetServicesHealthStatusResponse {
    map<string, bool> services_status = 1;
}

message JoinFederationRequest {
    LearnerEntity learner_entity = 1;
    LocalDatasetSpec local_dataset_spec = 2;
}

message JoinFederationResponse {
    Ack ack = 1;
    string token = 2; // For security reasons, randomly generate a string of size 64-characters that is associated with the joining learner.
}

message MarkTaskCompletedRequest {
    string learner_id = 1;
    string learner_token = 2;
    LearnerExecutionBaseMetadata base_metadata = 3;
    federatedmodel.FederatedModel federated_model = 4;
}

message MarkTaskCompletedResponse {
    Ack ack = 1;
}

message LeaveFederationRequest {
    string learner_id = 1;
    string learner_token = 2;
}

message LeaveFederationResponse {
    Ack ack = 1;
}