syntax = "proto3";
package metisfl;

import "google/protobuf/timestamp.proto";

import "metisfl/proto/model.proto";
import "metisfl/proto/service_common.proto";

service ControllerService {
  rpc GetHealthStatus (Empty) returns (HealthStatusResponse) {}

  rpc JoinFederation (JoinFederationRequest) returns (JoinFederationResponse) {}

  rpc LeaveFederation (LeaveFederationRequest) returns (Ack) {}

  rpc TrainDone (TrainDoneRequest) returns (Ack) {}

  rpc SetInitialWeights (ReplaceCommunityModelRequest) returns (Ack) {}

  rpc GetStatistics (GetStatisticsRequest) returns (GetStatisticsResponse) {}
  
  rpc ShutDown (Empty) returns (Ack) {}
}

message JoinFederationRequest {
  string hostname = 1;
  uint32 port = 2;
  string public_certificate_bytes = 3;
  uint32 num_traning_examples = 4;
}

message JoinFederationResponse {
  Ack ack = 1;
  string learner_id = 2; 
  string auth_token = 3; 
}

message EpochEvaluation {
  uint32 epoch_id = 1; // why the epoch id?
  map<string, string> metric_values = 2;
}

message TrainDoneRequest {
  string learner_id = 1;
  string auth_token = 2; 
  Model model = 3;
  map<string, string> metadata = 4;
  repeated EpochEvaluation epoch_evaluations = 5;
  string aux_metadata = 6; // @stripeli: This is a json string with additional metadata. 
}

message LeaveFederationRequest {
  string learner_id = 1; 
  string auth_token = 2; 
}

message ReplaceCommunityModelRequest {
  // TODO(stripeli): Require some sort of auth 
  FederatedModel model = 1;
}


message GetStatisticsRequest {
  int32 community_evaluation_backtracks = 1;
  int32 local_task_backtracks = 2;
  int32 metadata_backtracks = 3;
}

message GetStatisticsResponse {
  repeated LearnerDescriptor learners = 1; // only lerner_id and dataset_spec are populated
  repeated CommunityModelEvaluation community_evaluation = 2;
  map<string, LocalTasksMetadata> learners_task = 3;
  repeated FederatedTaskRuntimeMetadata metadata = 4;
  string json_metadata = 5;
}

message LearnerDescriptor {
  string id = 1;
  string hostname = 2;
  uint32 port = 3;
  string auth_token = 4;
}

message LocalTasksMetadata {
  repeated TaskExecutionMetadata task_metadata = 1;
}

message TaskExecutionMetadata {
  map <string, string> metadata = 1;
}

message CommunityModelEvaluation {
  uint32 global_iteration = 1;
  map<string, ModelEvaluations> evaluations = 2;
}

message ModelEvaluations {
  map<string, string> metric_values = 1;
}

message FederatedTaskRuntimeMetadata {
  uint32 global_iteration = 1;
  google.protobuf.Timestamp started_at = 2;
  google.protobuf.Timestamp completed_at = 3;
  repeated string assigned_to_learner_id = 4;
  repeated string completed_by_learner_id = 5;
  // The times for train and eval tasks are based on the time they are submitted/sent
  // to the learners. They do not reflect the "true" time it takes for actual training
  // and evaluation, since the period (submitted_at, received_at) also contains the
  // communication time - message exchanges roundtrip.
  map<string, google.protobuf.Timestamp> train_task_submitted_at = 6;
  map<string, google.protobuf.Timestamp> train_task_received_at = 7;
  map<string, google.protobuf.Timestamp> eval_task_submitted_at = 8;
  map<string, google.protobuf.Timestamp> eval_task_received_at = 9;
  map<string, double> model_insertion_duration_ms = 10;
  map<string, double> model_selection_duration_ms = 11;
  google.protobuf.Timestamp model_aggregation_started_at = 12;
  google.protobuf.Timestamp model_aggregation_completed_at = 13;
  double model_aggregation_total_duration_ms = 14;
  repeated double model_aggregation_block_size = 15;
  repeated double model_aggregation_block_memory_kb = 16;
  repeated double model_aggregation_block_duration_ms = 17;
  repeated TensorQuantifier model_tensor_quantifiers = 18;
}