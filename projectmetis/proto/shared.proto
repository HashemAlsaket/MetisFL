syntax = "proto3";
package projectmetis;

import "google/protobuf/timestamp.proto";
import "projectmetis/proto/optimizers.proto";

message Ack {
  bool status = 1;
  google.protobuf.Timestamp timestamp = 2;
  // TODO Add response (string) field for the client.
}

message DoubleVariable {
  repeated double values = 1; // The numeric values of a variable can be represented as a flatten list/collection of values; thus the list/collection of doubles.
  VariableDef variable_def = 2; // This is the definition of the variable that is used to restructure/reshape the flatten representation of the variable.
}

message EpochEvaluation {
  uint32 epoch_id = 1; // The id of the epoch. This is an integer-incremental value (i.e., serial number). A learner is training continuously and therefore it can increment its epoch id as it progresses its training.
  float epoch_score = 2; // The associated score of the epoch. This could be any numeric value, such as accuracy and f1-score in classification and MSE in regression tasks.
}

message LearnerEntity {
  string hostname = 1; // This field can be a hostname or an ip.
  uint32 port = 2; // Important, this is the port that learner's grpc server will be listening on for requests from the outside world.
}

message LearnerExecutionBaseMetadata {
  // TODO For every training, validation and test score below, we need to define the metrics we expect the learner to return. These metrics should be the ones defined in the evaluation field of message `common.LearningTask.evaluation`.
  repeated EpochEvaluation epochs_training_scores = 1; // A list with all training evaluations across all epochs.
  repeated EpochEvaluation epochs_validation_scores = 2; // A list with all validation evaluations across all epochs.
  repeated EpochEvaluation epochs_test_scores = 3; // A list of all test evaluations across all epochs.
  float completed_epochs = 4; // Learner may perform partial epochs, thus the float data type.
  uint32 completed_batches = 5;
  uint32 batch_size = 6;
  float processing_ms_per_epoch = 7; // Time-per-epoch in milliseconds.
  float processing_ms_per_batch = 8; // Time-per-batch in milliseconds.
}

message LearningHyperParameters {
  uint32 batch_size = 1;
  oneof optimizer {
    VanillaSGD vanilla_sgd = 3;
    MomentumSGD momentum_sgd = 4;
    FedProx fed_prox = 5;
    Adam adam = 6;
  }
  // TODO We defined this message as LearningHyperparameters because we expect to extend its definition with additional fields related to model training.
}

message LearningTask {
  uint32 num_local_updates = 1; // This reflects the number of local steps the learner needs to perform. It is similar to epochs if we take |num_training_examples| / batch_size.
  float training_dataset_percentage_for_stratified_validation = 2;
  // TODO We need to define the metrics we expect the learner to return. This should be similar to the evaluation field in message `learner.EvaluateModelRequest`.
}

message LocalDatasetSpec {
  uint32 num_training_examples = 1;
  uint32 num_validation_examples = 2;
  uint32 num_test_examples = 3;
  // TODO We need to add a message, which in the case of classification describes: (#classes, #examples_per_class), and in the case of regression: (mean, std, variance).
  // TODO Local dataset attributes and schema.
}

message VariableDef {
  uint32 size = 1; // Number of elements in the array.
  string dtype = 2; // Data type (int, float, double); can be used for casting.
  repeated int32 dimensions = 3; // List of variable's dimensions.
}
